(function(modules){var installedModules={};function __webpack_require__(moduleId){if(installedModules[moduleId]){return installedModules[moduleId].exports}var module=installedModules[moduleId]={i:moduleId,l:false,exports:{}};modules[moduleId].call(module.exports,module,module.exports,__webpack_require__);module.l=true;return module.exports}__webpack_require__.m=modules;__webpack_require__.c=installedModules;__webpack_require__.i=function(value){return value};__webpack_require__.d=function(exports,name,getter){if(!__webpack_require__.o(exports,name)){Object.defineProperty(exports,name,{configurable:false,enumerable:true,get:getter})}};__webpack_require__.n=function(module){var getter=module&&module.__esModule?function getDefault(){return module["default"]}:function getModuleExports(){return module};__webpack_require__.d(getter,"a",getter);return getter};__webpack_require__.o=function(object,property){return Object.prototype.hasOwnProperty.call(object,property)};__webpack_require__.p="";return __webpack_require__(__webpack_require__.s=6)})([function(module,exports){if(typeof AFRAME==="undefined"){throw new Error("Component attempted to register before AFRAME was available.")}AFRAME.registerComponent("debug_data",{schema:{inputEvent:{type:"string"}},multiple:false,init:function(){let data=this.data;let el=this.el;if(data.input&&data.output){listenEvent(data,el)}},update:function(oldData){var data=this.data;var el=this.el;if(data!==oldData){if(data.inputEvent!==oldData.inputEvent){console.log("Change event because from has changed");el.removeEventListener(data.inputEvent,function(e){});listenEvent(data,el)}}},remove:function(){},pause:function(){},play:function(){}});let listenEvent=(data,el)=>{el.addEventListener(data.inputEvent,function(e){showDebugPlane(data,el)})};let showDebugPlane=(data,el)=>{if(!el.querySelector(".debug_data")){let debugPanel=generateDebugPanel(data,el,el.getAttribute("dataEntity"));el.appendChild(debugPanel)}};function generateDebugPanel(data,el,dataToShow){const HEIGHT_PLANE_DEBUG=10;const WIDTH_PLANE_DEBUG=10;let entity=document.createElement("a-plane");entity.setAttribute("color","white");entity.setAttribute("class","debug_data");entity.setAttribute("width",HEIGHT_PLANE_DEBUG);entity.setAttribute("height",WIDTH_PLANE_DEBUG);let parentPos=el.getAttribute("position");let parentWidth=0;let parentHeight=0;if(el.getAttribute("geometry")){parentWidth=el.getAttribute("geometry").width;parentHeight=el.getAttribute("geometry").height}entity.setAttribute("position",{x:parentPos.x+parentWidth*1/2+WIDTH_PLANE_DEBUG/2,y:0-parentHeight*1/2+HEIGHT_PLANE_DEBUG/2,z:parentPos.z});let textEntity=document.createElement("a-text");textEntity.setAttribute("value",JSON.stringify(dataToShow));textEntity.setAttribute("width",HEIGHT_PLANE_DEBUG);textEntity.setAttribute("height",WIDTH_PLANE_DEBUG);textEntity.setAttribute("color","black");textEntity.setAttribute("position",{x:0-entity.getAttribute("width")/2,y:0-el.getAttribute("height")/2,z:0});entity.appendChild(textEntity);return entity}},function(module,exports){if(typeof AFRAME==="undefined"){throw new Error("Component attempted to register before AFRAME was available.")}AFRAME.registerComponent("interaction-mapper",{schema:{input:{type:"string"},output:{type:"string"}},multiple:false,init:function(){let data=this.data;let el=this.el;if(data.input&&data.output){mapEvents(data,el)}},update:function(oldData){var data=this.data;var el=this.el;if(data!==oldData){if(data.input!==oldData.input||data.output!==oldData.output){console.log("Change event because from has changed");el.removeEventListener(oldData.input,function(e){});mapEvents(data,el)}}},remove:function(){},pause:function(){},play:function(){}});let mapEvents=(data,el)=>{el.addEventListener(data.input,function(e){el.emit(data.output,e,false)})}},function(module,exports){if(typeof AFRAME==="undefined"){throw new Error("Component attempted to register before AFRAME was available.")}AFRAME.registerComponent("querier_github",{schema:{user:{type:"string"},token:{type:"string"},repos:{type:"array"}},multiple:false,init:function(){let data=this.data;let el=this.el;if(data.user&&data.repos.length===0){requestAllReposFromUser(data,el)}else if(data.repos.length>0){requestReposFromList(data,el)}},update:function(oldData){var data=this.data;var el=this.el},remove:function(){},pause:function(){},play:function(){}});let requestReposFromList=(data,el)=>{let dataOfRepos={};data.repos.forEach((e,i)=>{let request=new XMLHttpRequest;let url="https://api.github.com/repos/"+data.user+"/"+e+"?_="+(new Date).getTime();request.open("get",url,false);request.onload=function(){if(this.status>=200&&this.status<300){console.log("data OK in request.response",el.id);let rawData=JSON.parse(request.response);dataOfRepos[rawData.name]=rawData}else{reject({status:this.status,statusText:xhr.statusText})}};request.onerror=function(){reject({status:this.status,statusText:xhr.statusText})};request.send()});data.dataRetrieved=dataOfRepos;el.setAttribute("dataEntity",JSON.stringify(data.dataRetrieved));el.emit("dataReady"+el.id,data.dataRetrieved)};let requestAllReposFromUser=(data,el)=>{let request=new XMLHttpRequest;let url="https://api.github.com/users/"+data.user+"/repos?_="+(new Date).getTime();request.open("get",url);request.onload=function(){if(this.status>=200&&this.status<300){console.log("data OK in request.response",el.id);data.dataRetrieved=allReposParse(JSON.parse(request.response));el.setAttribute("dataEntity",JSON.stringify(data.dataRetrieved));el.emit("dataReady"+el.id,data.dataRetrieved)}else{reject({status:this.status,statusText:xhr.statusText})}};request.onerror=function(){reject({status:this.status,statusText:xhr.statusText})};request.send()};let allReposParse=data=>{let dataParsed={};data.forEach((e,i)=>{dataParsed[e.name]=e});return dataParsed}},function(module,exports){if(typeof AFRAME==="undefined"){throw new Error("Component attempted to register before AFRAME was available.")}AFRAME.registerComponent("querier_json",{schema:{url:{type:"string"},embedded:{type:"string"}},multiple:false,init:function(){let data=this.data;let el=this.el;if(data.url){requestJSONDataFromURL(data,el)}else if(data.embedded){parseEmbeddedJSONData(data,el)}},update:function(oldData){var data=this.data;var el=this.el},remove:function(){},pause:function(){},play:function(){}});let requestJSONDataFromURL=(data,el)=>{let request=new XMLHttpRequest;request.open("get",data.url);request.onload=function(){if(this.status>=200&&this.status<300){if(typeof request.response==="string"||request.response instanceof String){data.dataRetrieved=JSON.parse(request.response)}else{data.dataRetrieved=request.response}el.setAttribute("dataEntity",JSON.stringify(data.dataRetrieved));el.emit("dataReady"+el.id,data.dataRetrieved)}else{reject({status:this.status,statusText:xhr.statusText})}};request.onerror=function(){reject({status:this.status,statusText:xhr.statusText})};request.send()};let parseEmbeddedJSONData=(data,el)=>{data.dataRetrieved=JSON.parse(data.embedded);el.setAttribute("dataEntity",data.embedded);el.emit("dataReady"+el.id,data.embedded)}},function(module,exports){if(typeof AFRAME==="undefined"){throw new Error("Component attempted to register before AFRAME was available.")}AFRAME.registerComponent("visdata",{dependencies:["querier","vismapper"],schema:{from:{type:"string"},index:{type:"string"}},multiple:false,init:function(){let data=this.data;let el=this.el;let querierElement=document.getElementById(data.from);if(querierElement.getAttribute("dataEntity")){let dataFromQuerier=JSON.parse(querierElement.getAttribute("dataEntity"));if(!dataFromQuerier[data.index]&&!isNaN(parseInt(data.index))){saveEntityData(data,el,dataFromQuerier[Object.keys(dataFromQuerier)[parseInt(data.index)]])}else{saveEntityData(data,el,dataFromQuerier[data.index])}}else{document.getElementById(data.from).addEventListener("dataReady"+data.from,function(e){if(!e.detail[data.index]&&!isNaN(parseInt(data.index))){saveEntityData(data,el,e.detail[Object.keys(e.detail)[parseInt(data.index)]]);el.setAttribute("visdata","dataRetrieved",data.dataRetrieved)}else{saveEntityData(data,el,e.detail[data.index]);el.setAttribute("visdata","dataRetrieved",data.dataRetrieved)}})}},update:function(oldData){var data=this.data;var el=this.el;if(data!==oldData){if(data.dataRetrieved!==oldData.dataRetrieved){el.components.vismapper.data.dataToShow=data.dataRetrieved;el.components.vismapper.update(el.components.vismapper.data)}if(data.from!==oldData.from){console.log("Change event because from has changed");document.getElementById(data.from).removeEventListener("dataReady"+oldData.from,function(e){});document.getElementById(data.from).addEventListener("dataReady"+data.from,function(e){saveEntityData(data,el,e.detail[data.index]);el.components.vismapper.data.dataToShow=data.dataRetrieved;el.components.vismapper.update(el.components.vismapper.data)})}}},remove:function(){},pause:function(){},play:function(){}});let saveEntityData=(data,el,dataToSave)=>{data.dataRetrieved=dataToSave;el.setAttribute("dataEntity",JSON.stringify(dataToSave))}},function(module,exports){if(typeof AFRAME==="undefined"){throw new Error("Component attempted to register before AFRAME was available.")}AFRAME.registerComponent("vismapper",{schema:{width:{type:"string"},depth:{type:"string"},height:{type:"string"}},multiple:false,init:function(){let data=this.data;let el=this.el},update:function(oldData){var data=this.data;var el=this.el;if(data.dataToShow){if(el.components.geometry.data.primitive==="box"){el.components.geometry.data.height=data.dataToShow[data.height]/100;el.components.geometry.data.width=data.dataToShow[data.width]||2;el.components.geometry.data.depth=data.dataToShow[data.depth]||2;let oldPos=el.getAttribute("position");el.setAttribute("position",{x:oldPos.x,y:data.dataToShow[data.height]/200,z:oldPos.z})}el.components.geometry.update(el.components.geometry.data)}},remove:function(){},pause:function(){},play:function(){}})},function(module,exports,__webpack_require__){__webpack_require__(2);__webpack_require__(3);__webpack_require__(5);__webpack_require__(4);__webpack_require__(1);__webpack_require__(0)}]);
